#define BLACK 0
#include <stdio.h>
#include <stdlib.h>
#include <GL/glut.h>

int submenu;
float x1, y11, x2, y2, x3, y3, x4, y4;

void edgedetect(float x1, float y11, float x2, float y2, int *le, int *re)
{
	float mx, x, temp;
	int i;
	if((y2-y11) < 0)
	{
		temp=y11; y11=y2; y2=temp;
		temp=x1; x1=x2; x2=temp;
	}
	if((y2-y11) != 0)
		mx=(x2-x1)/(y2-y11);
	else
		mx = x2 - x1;
	x=x1;
	for(i=y11; i<=y2; i++)
	{
		if(x<(float)le[i])
			le[i]=(int)x;
		if(x>(float)re[i])
			re[i]=(int)x;
		x+=mx;
	}
}

void draw_pixel(int x, int y, int value)
{
	glBegin(GL_POINTS);
		glVertex2i(x, y);
	glEnd();
}

void scanfill(float x1, float y11, float x2, float y2, float x3, float y3, float x4, float y4)
{
	int le[500], re[500];
	int i, y;
	for(i=0; i<500; i++)
	{
		le[i] = 500;
		re[i] = 0;
	}
	edgedetect(x1, y11, x2, y2, le, re);
	edgedetect(x2, y2, x3, y3, le, re);
	edgedetect(x3, y3, x4, y4, le, re);
	edgedetect(x4, y4, x1, y11, le, re);
	for(y=0; y<500; y++)
	{
		if(le[y] <= re[y])
			for(i=(int)le[y]; i<(int)re[y]; i++)
				draw_pixel(i, y, BLACK);
	}
}

void drawText(int x, int y, char *s) {
	int i=0;
	glColor3f(1.0, 0.0, 0.0);
	glRasterPos2i(x, y);
	for(; s[i] != '\0'; i++) {
		glutBitmapCharacter (GLUT_BITMAP_HELVETICA_10, s[i]);
	}
}

void display()
{
	x1 = 200; y11 = 200;
	x2 = 100; y2 = 300;
	x3 = 200; y3 = 400;
	x4 = 300; y4 = 300;
	
	glClear(GL_COLOR_BUFFER_BIT);
	glBegin(GL_LINE_LOOP);
		glVertex2f(x1, y11);
		glVertex2f(x2, y2);
		glVertex2f(x3, y3);
		glVertex2f(x4, y4);
	glEnd();
	scanfill(x1, y11, x2, y2, x3, y3, x4, y4);
	drawText(350, 460, "1BI19CS057");
	drawText(350, 445, "Geethanjali C");
	glFlush();
}

void myInit()
{
	glClearColor(1, 1, 1, 1);
	glPointSize(1);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0, 499, 0, 499);
}

void menufunc(int n)
{
	switch(n)
	{
		case 1: glColor3f(1, 0, 0);
						break;
		case 2: glColor3f(0, 1, 0);
						break;
		case 3: glColor3f(0, 0, 1);
						break;
	}
}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowSize(500, 500);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("Fillinga polygon using Scan-Line Algorithm");
	submenu = glutCreateMenu(menufunc);
	glutAddMenuEntry("RED", 1);
	glutAddMenuEntry("GREEN", 2);
	glutAddMenuEntry("BLUE", 3);
	glutAttachMenu(GLUT_RIGHT_BUTTON);
	glutDisplayFunc(display);
	myInit();
	glutMainLoop();
	return 0;
}
