def aStarAlgo(start_node, stop_node):
    open_set = set(start_node)
    closed_set = set()
    g = {}
    parents = {}
    g[start_node] = 0
    parents[start_node] = start_node
    while len(open_set) > 0:
        n = None
        for v in open_set:
            if n == None or g[v] + heuristic(v) < g[n] + heuristic(n):
                n = v    
        if n == stop_node or graph_nodes[n] == None:
            pass
        else:
            for m, weight in get_neighbours(n):
                if m not in open_set and m not in closed_set:
                    open_set.add(m)
                    parents[m] = n
                    g[m] = g[n] + weight
                else:
                    if g[m] > g[n] + weight:
                        g[m] = g[n] + weight
                        parents[m] = n
                        
                if m in closed_set:
                    closed_set.remove(m)
                    open_set.add(m)
                    
        if n == None:
            print('Path does not exist1')
            return None
                
        if n == stop_node:
            path = []
            while parents[n] != n:
                path.append(n)
                n = parents[n]
            path.append(start_node)
            path.reverse()
            print('Path found: {}'.format(path))
            return path
            
        open_set.remove(n)
        closed_set.add(n)
    print('Path does not exist2!')
    return None
        
def get_neighbours(v):
    if v in graph_nodes:
        return graph_nodes[v]
    else:
        return None
    
def heuristic(n):
    H_dist = {
        'A' : 10,
        'B' : 13,
        'C' : 4,
        'D' : 2,
        'E' : 4,
        'F' : 1,
        'G' : 0,
        'S' : 17
    }
    
    return H_dist[n]
        
graph_nodes = {
    'S': [('A', 6), ('B', 5), ('C', 16)],
    'A': [('E', 6)],
    'B': [('D', 2), ('E', 6)],
    'C': [('D', 6)],
    'D': [('F', 1)],
    'E': [('F', 4)],
    'F': [('G', 2)]
}

aStarAlgo('S', 'G')
